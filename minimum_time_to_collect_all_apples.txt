Minimum Time to Collect All Apples in a Tree

Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.


class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        int answer = 0;
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        boolean[] visited = new boolean[n];

        for(int[] arr : edges){
            int a = arr[0]; 
            int b = arr[1];
            
            map.computeIfAbsent(a, x -> new ArrayList<Integer>()).add(b);
            map.computeIfAbsent(b, x -> new ArrayList<Integer>()).add(a);

        }

        answer = dfs(visited, 0, map, hasApple);
        return answer > 0 ? answer : 0;
    }

    int dfs(boolean[] visited, int source, HashMap<Integer,List<Integer>> map,  
        List<Boolean> hasApple){

        visited[source] = true;    
    
        List<Integer> list = map.get(source);
        if(list == null || list.size() == 0) {
            return hasApple.get(source) ? 0 : -1;
        }

        int sum = 0;

        for(int i=0; i<list.size(); i++){
            int e = list.get(i);
            if(!visited[e]) {
            int temp = dfs(visited, e, map, hasApple);
            if(temp != -1) {
                sum += temp + 2;
            }
            }
        }

        return sum > 0 || hasApple.get(source) ? sum : -1;

    }
}